use xed_sys::*;

use crate::raw::IntoRaw;

crate::macros::xed_enum! {
    pub enum Operand {
        ABSBR,
        AGEN,
        AMD3DNOW,
        ASZ,
        BASE0,
        BASE1,
        BCAST,
        BCRC,
        BRDISP_WIDTH,
        CET,
        CHIP,
        CLDEMOTE,
        DEFAULT_SEG,
        DF32,
        DF64,
        DISP,
        DISP_WIDTH,
        DUMMY,
        EASZ,
        ELEMENT_SIZE,
        ENCODER_PREFERRED,
        ENCODE_FORCE,
        EOSZ,
        ERROR,
        ESRC,
        EVVSPACE,
        FIRST_F2F3,
        HAS_EGPR,
        HAS_MODRM,
        HAS_SIB,
        HINT,
        ICLASS,
        ILD_F2,
        ILD_F3,
        ILD_SEG,
        IMM0,
        IMM0SIGNED,
        IMM1,
        IMM1_BYTES,
        IMM_WIDTH,
        INDEX,
        LAST_F2F3,
        LLRC,
        LOCK,
        LZCNT,
        MAP,
        MASK,
        MAX_BYTES,
        MEM0,
        MEM1,
        MEM_WIDTH,
        MOD,
        MODE,
        MODEP5,
        MODEP55C,
        MODE_FIRST_PREFIX,
        MODE_SHORT_UD0,
        MODRM_BYTE,
        MPXMODE,
        MUST_USE_EVEX,
        ND,
        NEEDREX,
        NEED_MEMDISP,
        NEED_SIB,
        NELEM,
        NF,
        NOMINAL_OPCODE,
        NOREX,
        NOREX2,
        NO_APX,
        NO_EVEX,
        NO_VEX,
        NPREFIXES,
        NREXES,
        NSEG_PREFIXES,
        OSZ,
        OUTREG,
        OUT_OF_BYTES,
        P4,
        POS_DISP,
        POS_IMM,
        POS_IMM1,
        POS_MODRM,
        POS_NOMINAL_OPCODE,
        POS_SIB,
        PREFIX66,
        PTR,
        REALMODE,
        REG,
        REG0,
        REG1,
        REG2,
        REG3,
        REG4,
        REG5,
        REG6,
        REG7,
        REG8,
        REG9,
        RELBR,
        REP,
        REX,
        REX2,
        REXB,
        REXB4,
        REXR,
        REXR4,
        REXW,
        REXX,
        REXX4,
        RM,
        ROUNDC,
        SAE,
        SCALE,
        SCC,
        SEG0,
        SEG1,
        SEG_OVD,
        SIBBASE,
        SIBINDEX,
        SIBSCALE,
        SKIP_OSZ,
        SMODE,
        SRM,
        TZCNT,
        UBIT,
        UIMM0,
        UIMM1,
        USING_DEFAULT_SEGMENT0,
        USING_DEFAULT_SEGMENT1,
        VEXDEST210,
        VEXDEST3,
        VEXDEST4,
        VEXVALID,
        VEX_C4,
        VEX_PREFIX,
        VL,
        VL_IGN,
        WBNOINVD,
        ZEROING,
    }
}

impl Operand {
    /// Tests the enum for inclusion in `REG0` through `REG9`.
    ///
    /// Note that there are other registers for memory addressing. See
    /// [`InstOperand::is_memory_addressing_register`].
    pub fn is_register(self) -> bool {
        unsafe { xed_operand_is_register(self.into_raw()) != 0 }
    }

    /// Tests the enum of inclusion in `BASE0`, `BASE1`, `INDEX`, `SEG0`,
    /// `SEG1`.
    pub fn is_memory_addressing_register(self) -> bool {
        unsafe { xed_operand_is_memory_addressing_register(self.into_raw()) != 0 }
    }
}
